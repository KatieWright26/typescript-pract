{"version":3,"sources":["pages/ObjectDesign/chapter-2.md","pages/FAQ.md","pages/Generics.tsx","components/Navigation.tsx","pages/ObjectDesignNotes.tsx","pages/Select.tsx","components/TweetInput.tsx","components/Tweet.tsx","components/Tweets.tsx","tweets.ts","pages/Tweet.tsx","pages/TypeUnknown.tsx","Routes.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Role","Navigation","to","Generics","args","people","name","age","address","job","Developer","Marketer","Manager","Accountant","randomPerson","idx","Math","floor","random","length","ObjectDesignNotes","readmePath","require","useState","notes","setNotes","fetch","then","response","text","marked","dangerouslySetInnerHTML","__html","languages","isLanguageValid","value","includes","Select","userLanguage","window","navigator","language","setLanguage","defaultValue","onChange","event","newLocale","target","Error","handleEvent","join","TweetInput","props","userId","CURRENT_USER","userName","userHandle","id","NEXT_ID","tweet","setTweetValue","isEmpty","onSubmit","preventDefault","handleClick","prepareTweet","type","handleChange","disabled","Tweet","key","Tweets","tweets","map","sort","tweetA","tweetB","parseInt","tweetList","setTweetList","className","newTweet","newTweets","concat","TypeUnknown","userIsString","Routes","path","exact","from","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bd3bb277.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chapter-2.c3a8e834.md\";","module.exports = __webpack_public_path__ + \"static/media/FAQ.18003fe6.md\";","/* eslint-disable max-lines-per-function */\nimport React from 'react';\n\nenum Role {\n    Developer,\n    Marketer,\n    Accountant,\n    Manager\n}\n\nconst Generics = () => {\n    interface Person {\n        name: string;\n        age: number;\n        address: string;\n    }\n\n    interface Employee extends Person {\n        job: Role;\n    }\n\n    interface Employer extends Person {\n        job: Role;\n        employees: [Employee];\n    }\n\n    function getPerson<T extends Person>(args: T): string {\n        return `${args.name} is ${args.age} years of age. They reside in ${args.address}.`;\n    }\n\n    function getEmployeeJobTitle<T extends Employee>(employee: T): string {\n        return Role[employee.job];\n    }\n\n    function getEmployeeInfo<T extends Employee>(employee: T): Employee {\n        return employee;\n    }\n\n    /*\n     * Function getEmployer<T extends Employer>(args: T): Employer {\n     *     return args.employees;\n     * }\n     */\n\n    const people = [\n        {\n            name: 'katie',\n            age: 29,\n            address: 'Amsterdam',\n            job: Role.Developer,\n        },\n        {\n            name: 'piet',\n            age: 36,\n            address: 'Amsterdam',\n            job: Role.Developer,\n        },\n        {\n            name: 'alice',\n            age: 26,\n            address: 'Melbourne',\n            job: Role.Marketer,\n        },\n        {\n            name: 'jenny',\n            age: 56,\n            address: 'Napier',\n            job: Role.Manager,\n        },\n        {\n            name: 'neil',\n            age: 60,\n            address: 'Wellington',\n            job: Role.Accountant,\n        },\n    ];\n\n    const randomPerson = (() => {\n        const idx: number = Math.floor(Math.random() * (people.length - 0)) + 0;\n\n        return people[idx];\n    })();\n\n    return (\n        <>\n            <p>{getPerson(randomPerson)}</p>\n            <p>Job: {getEmployeeJobTitle(randomPerson)}</p>\n\n        </>\n    );\n};\n\nexport default Generics;\n","import { Link } from 'react-router-dom';\nimport React from 'react';\n\nconst Navigation = () => (\n    <section>\n        <article>\n            <nav>\n                <Link to=\"/twitter\">Tweets</Link> |\n                <Link to=\"/select\">Select</Link> |\n                <Link to=\"/generics\">Generics</Link> |\n                <Link to=\"/object-design-notes\">Object Design Notes</Link> |\n                <Link to=\"/unknown-type\">Unknown Type</Link> |\n\n            </nav>\n        </article>\n        <hr/>\n    </section>\n);\n\nexport default Navigation;\n","/* eslint-disable global-require */\n/* eslint-disable @typescript-eslint/no-var-requires */\nimport React, { useState } from 'react';\nimport marked from 'marked';\n\nconst ObjectDesignNotes = (): JSX.Element => {\n    const readmePath = require('./ObjectDesign/chapter-2.md');\n    const [notes, setNotes] = useState('');\n\n    fetch(readmePath)\n        .then(response => response.text())\n        .then(text => {\n            setNotes(marked(text));\n        });\n\n    return (\n        <section>\n            <article dangerouslySetInnerHTML={{ __html: notes }}></article>\n        </section>\n    );\n};\n\nexport default ObjectDesignNotes;\n","import React, { useState } from 'react';\n\nconst languages = ['en-GB', 'fr-FR', 'es-CL', 'de'];\n\ntype Languages = typeof languages[number];\n\nconst isLanguageValid = (value: string): value is Languages => languages.includes(value);\n\nconst Select = () => {\n    let userLanguage = window.navigator.language;\n\n    if (!isLanguageValid(userLanguage)) {\n        userLanguage = languages[3];\n    }\n\n    const [language, setLanguage] = useState(userLanguage);\n\n    const handleEvent = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        const newLocale: string = event.target.value;\n\n        if (!isLanguageValid(newLocale)) {\n            throw new Error(`Invalid language: ${newLocale}`);\n        }\n\n        setLanguage(newLocale);\n    };\n\n    return (\n        <>\n            <select defaultValue={language} onChange={event => handleEvent(event)}>\n                <option value=\"en-GB\">English</option>\n                <option value=\"fr-FR\">French</option>\n                <option value=\"es-CL\">Spanish</option>\n                <option value=\"de\">German</option>\n                <option value=\"it-IT\">Italian (selecting this will throw an error)</option>\n            </select>\n            <h1>Supported app locales: {languages.join(', ')}</h1>\n            <p>The original user language was {window.navigator.language}</p>\n            <p>This has a type guard to ensure the the app language is set to  one which is supported: {language}.</p>\n        </>\n    );\n};\n\nexport default Select;\n","/* eslint-disable id-length */\n/* eslint-disable id-blacklist */\nimport { CURRENT_USER, NEXT_ID } from '../pages/Tweet';\nimport React, { FunctionComponent, useState } from 'react';\nimport { TweetType } from '../types';\n\ninterface Props {\n     handleClick: (tweet: TweetType) => void;\n}\n\nconst TweetInput: FunctionComponent<Props> = (props: Props) => {\n    const prepareTweet = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        props.handleClick(tweet);\n    };\n\n    const { userId, userName, userHandle } = CURRENT_USER;\n\n    const [tweet, setTweetValue] = useState<TweetType>({\n        userId,\n        text: '',\n        userName,\n        userHandle,\n        id: NEXT_ID,\n    });\n\n    const isEmpty = tweet.text.length === 0;\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (event.target.value.length <= 0) {\n            throw new Error('can\\'t save a tweet with no content');\n        }\n\n        setTweetValue({\n            ...tweet,\n            [event.target.name]: event.target.value,\n        });\n    };\n\n    return (\n        <form onSubmit={event => prepareTweet(event)}>\n            <input\n                type=\"text\"\n                value={tweet.text}\n                name=\"text\"\n                onChange={event => handleChange(event)}\n            />\n            <input value=\"Submit!\" type=\"submit\" disabled={isEmpty}/>\n        </form>\n    );\n};\n\nexport default TweetInput;\n","import React, { FunctionComponent } from 'react';\nimport { TweetType } from '../types';\n\nconst Tweet: FunctionComponent<{tweet: TweetType}> = ({ tweet }) => {\n    const { userName, userHandle, id, text } = tweet;\n\n    return (\n        <div key={`tweet-${id}`}>\n            <h4>{text}</h4>\n            <p><strong>{userName}</strong> {userHandle}</p>\n        </div>\n    );\n};\n\nexport default Tweet;\n","import React, { FunctionComponent } from 'react';\nimport Tweet from './Tweet';\nimport { TweetType } from '../types';\n\nconst Tweets: FunctionComponent<{tweets: Array<TweetType>}> = ({ tweets }) => (\n    <div>\n        <h2>List of Tweets</h2>\n        {tweets.map(\n            tweet => <Tweet tweet={tweet} key={`tweet${tweet.id}`}/>,\n        )}\n    </div>\n);\n\nexport default Tweets;\n","/* eslint-disable max-len */\nexport const tweets = [\n    {\n        id: '1',\n        text: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',\n        userId: '1',\n        userName: 'LoremLife',\n        userHandle: '@lorem',\n    },\n    {\n        id: '4',\n        text: 'Praesent dolor libero, convallis et pulvinar non, eleifend non felis.',\n        userId: '4',\n        userName: 'OcToThOrP',\n        userHandle: '@OcToThOrP',\n    },\n    {\n        id: '2',\n        text: 'Cras eget lacinia augue. Sed eros diam, rutrum non fringilla dictum, condimentum a quam. Sed viverra odio eget velit aliquet efficitur. ',\n        userId: '2',\n        userName: 'Ipsum',\n        userHandle: '@ipsum',\n    },\n    {\n        id: '3',\n        text: 'Sed elementum eget urna eget eleifend. Fusce ipsum lorem, feugiat eget fermentum a, facilisis eu tellus. Pellentesque lobortis lorem sagittis massa sagittis, at posuere libero ullamcorper. In consequat elementum enim, et accumsan urna sagittis quis.',\n        userId: '3',\n        userName: 'Umlaut',\n        userHandle: '@LatinLang',\n    },\n];\n","import React, { useState } from 'react';\nimport TweetInput from '../components/TweetInput';\nimport Tweets from '../components/Tweets';\nimport { tweets } from '../tweets';\nimport { TweetType } from '../types';\n\nconst sortedTweets = tweets.sort(\n    (tweetA, tweetB) => parseInt(tweetB.id) - parseInt(tweetA.id),\n);\n\nexport const NEXT_ID = sortedTweets[0].id + 1;\n\nexport const CURRENT_USER = {\n    userId: '4',\n    userName: 'Umlaut',\n    userHandle: '@LatinLang',\n};\n\nconst Tweet = () => {\n    const [tweetList, setTweetList] = useState(tweets);\n\n    const handleClick = (newTweet: TweetType): void => {\n        const newTweets = tweets.concat(newTweet);\n\n        setTweetList(newTweets);\n    };\n\n    return (\n        <div className=\"App\">\n            <h1>Typescript practise</h1>\n            <TweetInput handleClick={newTweet => handleClick(newTweet)}/>\n            <Tweets tweets={tweetList}/>\n        </div>\n    );\n};\n\nexport default Tweet;\n","/* eslint-disable max-len */\n/* eslint-disable max-statements */\n/* eslint-disable global-require */\n/* eslint-disable @typescript-eslint/no-var-requires */\nimport React, { useState } from 'react';\nimport marked from 'marked';\n\nconst TypeUnknown = (): JSX.Element => {\n    const stringValue: unknown = 'Katie';\n    const numberValue: unknown = 29;\n    const [notes, setNotes] = useState('');\n    const readmePath = require('./FAQ.md');\n    const validCountryCodes = ['uk', 'aus', 'nl'] as const;\n\n    type ValidCountryCode = typeof validCountryCodes[number]\n    const [countryCode, setCountryCode] = useState<ValidCountryCode>('uk');\n\n    /*\n     * Const currentCountryCode: unknown = 'nz';\n     * const validCountryCode = currentCountryCode as ValidCountryCode;\n     */\n\n    // SetCountryCode(validCountryCode);\n\n    fetch(readmePath)\n        .then(response => response.text())\n        .then(text => {\n            setNotes(marked(text));\n        });\n\n    function userIsString(value: unknown): value is string {\n        return typeof value === 'string';\n    }\n\n    return <section>\n        <h2>Type guards</h2>\n        <pre>function userIsString(value: unknown): value is string<br/>\n                return typeof value === &lsquo;string&lsquo;;\n        </pre>\n        <code>const stringValue: unknown = &lsquo;Katie&rsquo;</code><br/>\n        {userIsString(stringValue) && <p>User type is: string</p>}\n        <code>const numberValue: unknown = 29</code>\n        {!userIsString(numberValue) && <p>User type is: {typeof numberValue}</p>}\n        <hr/>\n        <h2>Type Assertions</h2>\n        <pre>\n            const validCountryCodes = [&lsquo;uk&lsquo;, &lsquo;aus&lsquo;, &lsquo;nl&lsquo;] as const;<br/>\n            type ValidCountryCode = typeof validCountryCodes[number] // &lsquo;uk&lsquo; | &lsquo;aus&lsquo; | &lsquo;nl&lsquo;<br/>\n            const [countryCode, setCountryCode] = useState&lt;ValidCountry&gt;(&lsquo;uk&lsquo;);<br/>\n            const newCountryCode = &lsquo;nz&rsquo;;\n        </pre>\n\n        <p> The following line will throw an error from anywhere in the code; as <code>newCountryCode</code> is not a valid type for the <code>countryCode</code> part of state.</p>\n        <pre>\n        setCountryCode(newCountryCode); // Argument of type &lsquo;nz&lsquo; is not assignable to parameter of type &lsquo;SetStateAction&lt;&lsquo;uk&lsquo; | &lsquo;aus&lsquo; | &lsquo;nl&lsquo;&gt; <br/>\n        </pre>\n        <p>We can override this with an unknown assertion.</p>\n        <pre>\n        const validCountryCodes = [&lsquo;uk&lsquo;, &lsquo;aus&lsquo;, &lsquo;nl&lsquo;] as const;<br/>\n        type ValidCountryCode = typeof validCountryCodes[number]<br/>\n        const [countryCode, setCountryCode] = useState&lt;ValidCountry&gt;(&lsquo;uk&lsquo;);<br/>\n        const currentCountryCode: unknown = &lsquo;nz&rsquo;;<br/>\n        const validCountryCode = currentCountryCode as ValidCountryCode<br/><br/>\n        setCountryCode(validCountryCode); // No error here<br/>\n        </pre>\n        <article dangerouslySetInnerHTML={{ __html: notes }}></article>\n    </section>;\n};\n\nexport default TypeUnknown;\n","import { Redirect, Route, Switch } from 'react-router-dom';\nimport Generics from './pages/Generics';\nimport ObjectDesignNotes from './pages/ObjectDesignNotes';\nimport React from 'react';\nimport Select from './pages/Select';\nimport Tweet from './pages/Tweet';\nimport TypeUnknown from './pages/TypeUnknown';\n\nconst Routes = (): JSX.Element => (\n    <Switch>\n        <Route path=\"/twitter\"><Tweet /></Route>\n        <Route path=\"/select\"><Select /></Route>\n        <Route path=\"/generics\"><Generics /></Route>\n        <Route path=\"/object-design-notes\"><ObjectDesignNotes /></Route>\n        <Route path=\"/unknown-type\"><TypeUnknown /></Route>\n\n        <Redirect exact from=\"/\" to=\"/object-design-notes\" />\n    </Switch>\n);\n\nexport default Routes;\n","import React, { FunctionComponent } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport Navigation from './components/Navigation';\nimport Routes from './Routes';\n\nconst App: FunctionComponent<{}> = () => (\n    <BrowserRouter>\n        <Navigation />\n        <Routes/>\n    </BrowserRouter>);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}